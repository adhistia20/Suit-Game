#include <ncurses.h>
#include <cstdlib> //memanggil fungsi rand()
#include <ctime> // menghasilkan angka acak
#include <fstream>
#include <vector> //menyimpan riwayat permainan
#include <string>
#include <algorithm>
#include <iostream>
#include <thread> //pengaturan waktu delay
#include <chrono> //pengaturan waktu delay

void showLoadingScreen() {
//menggunakan Looping 
    const char* loadingText = "Loading";
    for (int i = 0; i < 10; ++i) {
        clear();
        mvprintw(5, 10, "%s", loadingText);
        for (int j = 0; j <= i % 4; ++j) {
            printw(".");
        }
        refresh();
        std::this_thread::sleep_for(std::chrono::milliseconds(300)); //memberikan jeda untuk efek animasi loading
    }
}
//fungsi untuk menentukan hasil suit
std::string determineWinner(int playerChoice, int computerChoice) {
    // 0: Gunting, 1: Batu, 2: Kertas
    if (playerChoice == computerChoice) return "Seri";
    if ((playerChoice == 0 && computerChoice == 2) || 
        (playerChoice == 1 && computerChoice == 0) || 
        (playerChoice == 2 && computerChoice == 1)) return "Pemain";
    return "Komputer";
}
//menggunakan file teks
void saveHistoryToFile(const std::vector<std::string>& history) {
    std::ofstream file("history_game.txt"); //file mode tulis
    for (const auto& entry : history) {
        file << entry << "\n";
    }
    file.close();
}


void displayHistory() {
    clear();
    mvprintw(0, 0, "History Game:");
    std::ifstream file("history_game.txt"); //file mode baca
    std::string line;
    int y = 1;
    while (std::getline(file, line)) {
        mvprintw(y++, 0, "%s", line.c_str());
    }
    file.close();
    mvprintw(y + 1, 0, "Tekan Enter untuk kembali ke Menu.");
    refresh();
    getch();
}
void playGame() {
    std::vector<std::string> history;
    int playerScore = 0, computerScore = 0;

    while (true) {
        clear();
        mvprintw(0, 0, "Game Suit! (0: Gunting, 1: Batu, 2: Kertas, 3: Exit)");
        mvprintw(1, 0, "Score Pemain: %d | Score Komputer: %d", playerScore, computerScore);
        mvprintw(3, 0, "Pilih langkah mu: ");
        refresh();

        int playerChoice = getch() - '0';
        if (playerChoice == 3) break;

        if (playerChoice < 0 || playerChoice > 2) {
            mvprintw(5, 0, "Pilihan tidak tersedia! Tekan Spasi untuk kembali.");
            refresh();
            getch();
            continue;
        }

        
        int computerChoice = rand() % 3;
        std::string result = determineWinner(playerChoice, computerChoice);
    
        if (result == "Pemain") playerScore++;
        if (result == "Komputer") computerScore++;

        clear();
        mvprintw(0, 0, "Pilihan mu: %s", playerChoice == 0 ? "Gunting" : playerChoice == 1 ? "Batu" : "Kertas");
        mvprintw(1, 0, "Pilihan Komputer: %s", computerChoice == 0 ? "Gunting" : computerChoice == 1 ? "Batu" : "Kertas");
        mvprintw(2, 0, "Pemenang: %s", result.c_str());
        refresh();
        std::this_thread::sleep_for(std::chrono::seconds(2));

      
        history.push_back("Pemain: " + std::to_string(playerChoice) + ", Komputer: " + 
                          std::to_string(computerChoice) + ", Hasil: " + result);
    }

    
    saveHistoryToFile(history);
}
int main() {
    srand(time(0)); 
    initscr();      
    noecho();       
    cbreak();       

    showLoadingScreen();

    while (true) {
        clear();
        mvprintw(0, 0, "1. Mulai Game");
        mvprintw(1, 0, "2. Lihat History");
        mvprintw(2, 0, "3. Keluar");
        mvprintw(4, 0, "Tentukan Pilihan: ");
        refresh();

        int choice = getch() - '0';
        if (choice == 3) break;

        switch (choice) {
            case 1:
                playGame();
                break;
            case 2:
                displayHistory();
                break;
            default:
                mvprintw(6, 0, "Plihan Salah! Tekan spasi untuk memilih ulang.");
                refresh();
                getch();
                break;
        }
    }

    endwin(); 
    return 0;
}
